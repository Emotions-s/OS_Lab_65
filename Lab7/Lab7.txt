1.6) 3, 7

2)
Q1:     this.processing_row = tRow;
        this.processing_col = tCol;
        this.datA = a;
        this.datB = b;
        this.datC = c;

Q2: public

Q3: for (int i = 0; i < datA.data[0].length; i++) {
            datC.data[processing_row][processing_col] += datA.data[processing_row][i] * datB.data[i][processing_col];
        }

Q4: Thread[][] threads = new Thread[matC_r][matC_c];
        for (int i = 0; i < matC_r; i++) {
            for (int j = 0; j < matC_c; j++) {
                threads[i][j] = new Thread(new MatrixMulThread(i, j, matA, matB, matC));
                threads[i][j].start();
            }
        }

Q5: try {
            for (int i = 0; i < matC_r; i++) {
                for (int j = 0; j < matC_c; j++) {
                    threads[i][j].join();
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }

